{"version":3,"file":"static/js/475.3c72cc5c.chunk.js","mappings":"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","sources":["redux/selectors.js","components/Phonebook/ContactForm/ContactForm.jsx","components/Phonebook/ContactList/ContactList.styled.js","components/Phonebook/ContactList/ContactList.jsx","components/Phonebook/Filter/Filter.jsx","components/Phonebook/Phonebook.jsx","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) => {\n      return name.toLowerCase().includes(filter.toLowerCase());\n    });\n  }\n);\n","import { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport Button from '@mui/material/Button';\nimport { TextField } from '@mui/material';\n\nconst FormShema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .min(3, 'Too Short!')\n    .max(15, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .matches(\n      /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .min(12, 'At least 12 mins!')\n    .max(13, 'At most 13 maxes!')\n    .required('Required'),\n});\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const handleSubmit = (values, actions) => {\n    console.log(values);\n    const hasContact = contacts.find(\n      ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n    );\n    if (hasContact) {\n      alert(`${values.name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact(values));\n    actions.resetForm();\n  };\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validationSchema: FormShema,\n    onSubmit: handleSubmit,\n  });\n  return (\n    <form onSubmit={formik.handleSubmit} style={{ marginBottom: '20px' }}>\n      <TextField\n        margin=\"normal\"\n        required\n        fullWidth\n        type=\"text\"\n        id=\"name\"\n        label=\"Name\"\n        name=\"name\"\n        autoComplete=\"off\"\n        autoFocus\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        helperText={formik.touched.name && formik.errors.name}\n      />\n      <TextField\n        margin=\"normal\"\n        required\n        fullWidth\n        type=\"tel\"\n        id=\"number\"\n        label=\"Number\"\n        name=\"number\"\n        value={formik.values.number}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.number && Boolean(formik.errors.number)}\n        helperText={formik.touched.number && formik.errors.number}\n      />\n\n      <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\">\n        Add contact\n      </Button>\n    </form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin: ${props => props.theme.spasing(10)};\n  width: 100%;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  gap: ${props => props.theme.spasing(2)};\n\n  border-bottom: 1px solid ${props => props.theme.colors.gray};\n`;\nexport const SpanName = styled.span`\n  display: block;\n  width: 150px;\n`;\n","import { Item, List, SpanName } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/selectors';\nimport { deleteContact } from 'redux/operations';\nimport Button from '@mui/material/Button';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  const dispatch = useDispatch();\n\n  return (\n    <List>\n      {filteredContacts.map(({ id, name, number }) => (\n        <Item key={id}>\n          <SpanName>{name}</SpanName> <span>{number}</span>\n          <Button\n            onClick={() => {\n              dispatch(deleteContact(id));\n            }}\n            variant=\"outlined\"\n            color=\"error\"\n            startIcon={<DeleteIcon />}\n          >\n            Delete\n          </Button>\n        </Item>\n      ))}\n    </List>\n  );\n};\n","import { TextField } from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport { selectFilter } from 'redux/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <TextField\n      margin=\"normal\"\n      fullWidth\n      type=\"text\"\n      id=\"filter\"\n      label=\"Find contacts by name\"\n      placeholder=\"Start to type\"\n      value={filter}\n      onChange={evt => {\n        dispatch(setFilter(evt.target.value));\n      }}\n    />\n  );\n};\n","import { ContactForm } from './ContactForm/ContactForm';\nimport { ContactList } from './ContactList/ContactList';\nimport { Filter } from './Filter/Filter';\nimport { fetchContacts } from 'redux/operations';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/selectors';\nimport { Avatar, Box } from '@mui/material';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\n\nexport const Phonebook = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box\n      sx={{\n        my: 12,\n        mx: 4,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n      }}\n    >\n      <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n        <LockOutlinedIcon />\n      </Avatar>\n      <Typography component=\"h1\" variant=\"h5\">\n        Phonebook\n      </Typography>\n\n      <ContactForm />\n      <Typography component=\"h2\" variant=\"h5\">\n        Contacts\n      </Typography>\n      {isLoading && !error && <b>Request in progress...</b>}\n      <Filter />\n      <ContactList />\n    </Box>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { Phonebook } from 'components/Phonebook/Phonebook';\n\nexport default function contacts() {\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <Phonebook />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectError","error","selectIsLoading","isLoading","selectFilteredContacts","createSelector","_ref","name","toLowerCase","includes","FormShema","Yup","shape","matches","min","max","required","number","ContactForm","dispatch","useDispatch","useSelector","formik","useFormik","initialValues","validationSchema","onSubmit","values","actions","console","log","find","alert","concat","addContact","resetForm","_jsxs","handleSubmit","style","marginBottom","children","_jsx","TextField","margin","fullWidth","type","id","label","autoComplete","autoFocus","value","onChange","handleChange","onBlur","handleBlur","touched","Boolean","errors","helperText","Button","color","variant","List","styled","_templateObject","_taggedTemplateLiteral","props","theme","spasing","Item","_templateObject2","colors","gray","SpanName","_templateObject3","ContactList","filteredContacts","map","onClick","deleteContact","startIcon","DeleteIcon","Filter","placeholder","evt","setFilter","target","Phonebook","useEffect","fetchContacts","Box","sx","my","mx","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlinedIcon","Typography","component","_Fragment","Helmet"],"sourceRoot":""}